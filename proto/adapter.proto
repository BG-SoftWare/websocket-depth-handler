syntax = "proto3";
package proto.adapter;

message DepthElement{
  string price = 1;
  string amount = 2;
}

message Depth {
  repeated DepthElement bids = 1;
  repeated DepthElement asks = 2;
  int64 timestamp = 3;
  string error = 4;
}

message Pong{
  int64 time = 1;
}

message Empty {

}

message Order {
  string id = 1;
  int64 time = 2;
  string ticker = 3;
  string status = 4;
  string route = 5;
  string error = 6;
}

message RequestCreateOrder {
  string route = 1;
  string token_amount = 2;
  string token_price = 3;
}

message RequestCancelOrder {
  Order order = 1;
}

message EmptyWithError {
  string error = 1;
}

message Balance {
  string asset = 1;
  string free = 2;
  string locked = 3;
}

message BalanceList{
  repeated Balance balances = 1;
  string error = 2;
}

message RequestTradeInfo {
  Order order = 1;
}

message TradeInfo {
  string id = 1;
  int64 time = 2;
  string ticker = 3;
  string status = 4;
  string route = 5;
  string fee_amount = 6;
  string fee_currency = 7;
  string order_price = 8;
  string order_total = 9;
  string token_amount = 10;
  string error = 11;
}

message TradeInfoRequest {
  Order order = 1;
}

message BuyFeeTokenRequest{
  string usdt_amount = 1;
}

message BuyFeeToken{
  string token_amount = 1;
  string token_price = 2;
  string error = 3;
}


message MarketOrderRequest {
  string route = 1;
  string token_amount = 2;
}

message MarketOrder {
  string token_amount = 1;
  string token_price = 2;
  string error = 3;
}

service Adapter {
  rpc get_depth(Empty) returns (Depth);
  rpc place_order(RequestCreateOrder) returns (Order);
  rpc cancel_order(RequestCancelOrder) returns (EmptyWithError);
  rpc get_balances(Empty) returns (BalanceList);
  rpc get_trade_info(TradeInfoRequest) returns (TradeInfo);
  rpc get_order_status(Order) returns (Order);
  rpc buy_fee_token_on_market_for_usdt(BuyFeeTokenRequest) returns (BuyFeeToken);
  rpc ping(Empty) returns (Pong);
  rpc place_market_order(MarketOrderRequest) returns (MarketOrder);
}