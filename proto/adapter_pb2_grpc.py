# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import adapter_pb2 as proto_dot_adapter__pb2


class AdapterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_depth = channel.unary_unary(
                '/proto.adapter.Adapter/get_depth',
                request_serializer=proto_dot_adapter__pb2.Empty.SerializeToString,
                response_deserializer=proto_dot_adapter__pb2.Depth.FromString,
                )
        self.place_order = channel.unary_unary(
                '/proto.adapter.Adapter/place_order',
                request_serializer=proto_dot_adapter__pb2.RequestCreateOrder.SerializeToString,
                response_deserializer=proto_dot_adapter__pb2.Order.FromString,
                )
        self.cancel_order = channel.unary_unary(
                '/proto.adapter.Adapter/cancel_order',
                request_serializer=proto_dot_adapter__pb2.RequestCancelOrder.SerializeToString,
                response_deserializer=proto_dot_adapter__pb2.EmptyWithError.FromString,
                )
        self.get_balances = channel.unary_unary(
                '/proto.adapter.Adapter/get_balances',
                request_serializer=proto_dot_adapter__pb2.Empty.SerializeToString,
                response_deserializer=proto_dot_adapter__pb2.BalanceList.FromString,
                )
        self.get_trade_info = channel.unary_unary(
                '/proto.adapter.Adapter/get_trade_info',
                request_serializer=proto_dot_adapter__pb2.TradeInfoRequest.SerializeToString,
                response_deserializer=proto_dot_adapter__pb2.TradeInfo.FromString,
                )
        self.get_order_status = channel.unary_unary(
                '/proto.adapter.Adapter/get_order_status',
                request_serializer=proto_dot_adapter__pb2.Order.SerializeToString,
                response_deserializer=proto_dot_adapter__pb2.Order.FromString,
                )
        self.buy_fee_token_on_market_for_usdt = channel.unary_unary(
                '/proto.adapter.Adapter/buy_fee_token_on_market_for_usdt',
                request_serializer=proto_dot_adapter__pb2.BuyFeeTokenRequest.SerializeToString,
                response_deserializer=proto_dot_adapter__pb2.BuyFeeToken.FromString,
                )
        self.ping = channel.unary_unary(
                '/proto.adapter.Adapter/ping',
                request_serializer=proto_dot_adapter__pb2.Empty.SerializeToString,
                response_deserializer=proto_dot_adapter__pb2.Pong.FromString,
                )
        self.place_market_order = channel.unary_unary(
                '/proto.adapter.Adapter/place_market_order',
                request_serializer=proto_dot_adapter__pb2.MarketOrderRequest.SerializeToString,
                response_deserializer=proto_dot_adapter__pb2.MarketOrder.FromString,
                )


class AdapterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def get_depth(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def place_order(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cancel_order(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_balances(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_trade_info(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_order_status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def buy_fee_token_on_market_for_usdt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def place_market_order(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AdapterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_depth': grpc.unary_unary_rpc_method_handler(
                    servicer.get_depth,
                    request_deserializer=proto_dot_adapter__pb2.Empty.FromString,
                    response_serializer=proto_dot_adapter__pb2.Depth.SerializeToString,
            ),
            'place_order': grpc.unary_unary_rpc_method_handler(
                    servicer.place_order,
                    request_deserializer=proto_dot_adapter__pb2.RequestCreateOrder.FromString,
                    response_serializer=proto_dot_adapter__pb2.Order.SerializeToString,
            ),
            'cancel_order': grpc.unary_unary_rpc_method_handler(
                    servicer.cancel_order,
                    request_deserializer=proto_dot_adapter__pb2.RequestCancelOrder.FromString,
                    response_serializer=proto_dot_adapter__pb2.EmptyWithError.SerializeToString,
            ),
            'get_balances': grpc.unary_unary_rpc_method_handler(
                    servicer.get_balances,
                    request_deserializer=proto_dot_adapter__pb2.Empty.FromString,
                    response_serializer=proto_dot_adapter__pb2.BalanceList.SerializeToString,
            ),
            'get_trade_info': grpc.unary_unary_rpc_method_handler(
                    servicer.get_trade_info,
                    request_deserializer=proto_dot_adapter__pb2.TradeInfoRequest.FromString,
                    response_serializer=proto_dot_adapter__pb2.TradeInfo.SerializeToString,
            ),
            'get_order_status': grpc.unary_unary_rpc_method_handler(
                    servicer.get_order_status,
                    request_deserializer=proto_dot_adapter__pb2.Order.FromString,
                    response_serializer=proto_dot_adapter__pb2.Order.SerializeToString,
            ),
            'buy_fee_token_on_market_for_usdt': grpc.unary_unary_rpc_method_handler(
                    servicer.buy_fee_token_on_market_for_usdt,
                    request_deserializer=proto_dot_adapter__pb2.BuyFeeTokenRequest.FromString,
                    response_serializer=proto_dot_adapter__pb2.BuyFeeToken.SerializeToString,
            ),
            'ping': grpc.unary_unary_rpc_method_handler(
                    servicer.ping,
                    request_deserializer=proto_dot_adapter__pb2.Empty.FromString,
                    response_serializer=proto_dot_adapter__pb2.Pong.SerializeToString,
            ),
            'place_market_order': grpc.unary_unary_rpc_method_handler(
                    servicer.place_market_order,
                    request_deserializer=proto_dot_adapter__pb2.MarketOrderRequest.FromString,
                    response_serializer=proto_dot_adapter__pb2.MarketOrder.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.adapter.Adapter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Adapter(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def get_depth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.adapter.Adapter/get_depth',
            proto_dot_adapter__pb2.Empty.SerializeToString,
            proto_dot_adapter__pb2.Depth.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def place_order(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.adapter.Adapter/place_order',
            proto_dot_adapter__pb2.RequestCreateOrder.SerializeToString,
            proto_dot_adapter__pb2.Order.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def cancel_order(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.adapter.Adapter/cancel_order',
            proto_dot_adapter__pb2.RequestCancelOrder.SerializeToString,
            proto_dot_adapter__pb2.EmptyWithError.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_balances(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.adapter.Adapter/get_balances',
            proto_dot_adapter__pb2.Empty.SerializeToString,
            proto_dot_adapter__pb2.BalanceList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_trade_info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.adapter.Adapter/get_trade_info',
            proto_dot_adapter__pb2.TradeInfoRequest.SerializeToString,
            proto_dot_adapter__pb2.TradeInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_order_status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.adapter.Adapter/get_order_status',
            proto_dot_adapter__pb2.Order.SerializeToString,
            proto_dot_adapter__pb2.Order.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def buy_fee_token_on_market_for_usdt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.adapter.Adapter/buy_fee_token_on_market_for_usdt',
            proto_dot_adapter__pb2.BuyFeeTokenRequest.SerializeToString,
            proto_dot_adapter__pb2.BuyFeeToken.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.adapter.Adapter/ping',
            proto_dot_adapter__pb2.Empty.SerializeToString,
            proto_dot_adapter__pb2.Pong.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def place_market_order(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.adapter.Adapter/place_market_order',
            proto_dot_adapter__pb2.MarketOrderRequest.SerializeToString,
            proto_dot_adapter__pb2.MarketOrder.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
